{"version":3,"file":"image_editable.min.js","sources":["../src/image_editable.js"],"sourcesContent":["/**\n * This file is part of Moodle - http://moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @copyright 2021 Bas Brands\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n import Ajax from 'core/ajax';\n import Cropper from 'qtype_imageselect/cropper';\n import {get_string as getString} from 'core/str';\n import Templates from 'core/templates';\n import Notification from 'core/notification';\n\n const selectors = {\n     actions: {\n         confirm: '[data-action=\"confirm\"]',\n         cancel: '[data-action=\"cancel\"]',\n         cropimage: '[data-action=\"cropimage\"]',\n         rotateleft: '[data-action=\"rotateleft\"]',\n         rotateright: '[data-action=\"rotateright\"]',\n         uploadimage: '[data-action=\"uploadimage\"]',\n         deleteimage: '[data-action=\"deleteimage\"]'\n     },\n     regions: {\n         imagehandler: '[data-region=\"imagehandler\"]',\n         imagecontrols: '[data-region=\"imagecontrols\"]',\n         alert: '.alert',\n         zoomslider: '.cr-slider',\n         editactions: '[data-region=\"editactions\"]',\n         confirmactions: '[data-region=\"confirmactions\"]',\n         spinner: '[data-region=\"spinner\"]',\n         hiddenFormField: '[data-region=\"hiddenformfield\"]'\n     },\n     classes: {\n         hidden: 'd-none',\n         saving: 'saving',\n         deleting: 'deleting',\n         disabled: 'disabled',\n         enabled: 'js-enabled'\n     }\n };\n /**\n  * Get human file size from bytes.\n  *\n  * @param {integer} size\n  * @returns {string} the human readable size string\n  */\n  export const humanFileSize = size => {\n     const i = Math.floor(Math.log(size) / Math.log(1024));\n     return (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i];\n };\n /**\n  * Show an alert on the image.\n  * @param  {HTMLElement} target DOM node of the editable image\n  * @param  {String} msg Message to show in the alert\n  * @return {Promise} Template promise.\n  */\n const showImageAlert = (target, msg) => {\n     return Templates.render('core/notification', {\n         message: msg,\n         closebutton: true,\n         iswarning: true\n     }).then((html, js) => {\n         Templates.prependNodeContents(target, html, js);\n         return;\n     });\n };\n\n /**\n  * Remove the image alert.\n  * @param {HTMLElement} target DOM node of the editable image\n  */\n const removeImageAlert = target => {\n     const alert = target.querySelector(selectors.regions.alert);\n     if (alert) {\n         alert.remove();\n     }\n };\n\n /**\n  * Show the spinner.\n  * @param  {HTMLElement} target DOM node of the editable image\n  * @param  {Bool} show\n  */\n const showSpinner = (target, show) => {\n     const spinner = target.querySelector(selectors.regions.spinner);\n     if (show) {\n         spinner.classList.remove(selectors.classes.hidden);\n     } else {\n         spinner.classList.add(selectors.classes.hidden);\n     }\n };\n\n /**\n  * Show delete option\n  * @param  {HTMLElement} target DOM node of the editable image\n  * @param  {Bool} show\n  */\n  const showDeleteOption = (target, show) => {\n     const deleteimage = target.querySelector(selectors.actions.deleteimage);\n     if (show) {\n         deleteimage.classList.add(selectors.classes.enabled);\n         deleteimage.setAttribute('tabindex', 0);\n     } else {\n         deleteimage.classList.remove(selectors.classes.enabled);\n         deleteimage.setAttribute('tabindex', -1);\n     }\n  };\n\n /**\n  * Show the edit actions upload image and crop image, this hides\n  * the confirm actions.\n  * @param  {HTMLElement} target DOM node of the editable image\n  */\n const showEditActions = target => {\n     const currentimage = target.getAttribute('data-currentimage');\n     const cropimage = target.querySelector(selectors.actions.cropimage);\n     const confirmactions = target.querySelector(selectors.regions.confirmactions);\n     const editactions = target.querySelector(selectors.regions.editactions);\n\n     if (currentimage) {\n         cropimage.classList.remove(selectors.classes.hidden);\n         showDeleteOption(target, true);\n     } else {\n         cropimage.classList.add(selectors.classes.hidden);\n         showDeleteOption(target, false);\n     }\n\n     confirmactions.classList.add(selectors.classes.hidden);\n     editactions.classList.remove(selectors.classes.hidden);\n\n\n     removeImageAlert(target);\n };\n\n /**\n  * Save an image from the image handler\n  * @param {Object} args The request arguments\n  * @return {Promise} Resolved with an array file the stored file url.\n  */\n const updateImage = args => {\n     const request = {\n         methodname: 'qtype_imageselect_imageeditable_update_image',\n         args: args\n     };\n\n     let promise = Ajax.call([request])[0]\n         .fail(Notification.exception);\n\n     return promise;\n };\n\n /**\n  * Set the background image\n  * @param {HTMLElement} imageHandler DOM node of the editable image\n  * @param {String} imageUrl the new background image url or data.\n  */\n const setBackgroundImage = (imageHandler, imageUrl) => {\n     imageHandler.style.backgroundImage = 'url(\"' + imageUrl + '\")';\n };\n\n /**\n  * Show the confirm actions, this hides the edit actions.\n  * @param {HTMLElement} target DOM node of the editable image wrapper\n  * @param {Promise} string promise to show on confirm button.\n  * @param {function} action to execute.\n  */\n const confirmAction = (target, string, action) => {\n     const confirmactions = target.querySelector(selectors.regions.confirmactions);\n     const editactions = target.querySelector(selectors.regions.editactions);\n     const confirm = target.querySelector(selectors.actions.confirm);\n\n     // Create a new button to remove all old event listeners.\n     const newconfirm = confirm.cloneNode(true);\n     confirm.parentNode.replaceChild(newconfirm, confirm);\n\n     string.done(str => {\n         newconfirm.innerHTML = str;\n\n         confirmactions.classList.remove(selectors.classes.hidden);\n         editactions.classList.add(selectors.classes.hidden);\n\n         newconfirm.addEventListener('click', e => {\n             action();\n             e.preventDefault();\n         });\n     });\n     showDeleteOption(target, false);\n };\n\n /**\n  * Show the cancel actions.\n  * @param {HTMLElement} target DOM node of the editable image wrapper\n  * @param {function} action callback to execute.\n  */\n const cancelAction = (target, action) => {\n     let cancel = target.querySelector(selectors.actions.cancel);\n\n     // Create a new button to remove all old event listeners.\n     const newcancel = cancel.cloneNode(true);\n     cancel.parentNode.replaceChild(newcancel, cancel);\n\n     newcancel.addEventListener('click', e => {\n         action();\n         e.preventDefault();\n     });\n };\n\n /**\n  * Crop the current image.\n  * @param {HTMLElement} target DOM node of the editable image wrapper.\n  */\n const imageCropper = target => {\n     const imageHandler = target.querySelector(selectors_regions.imagehandler);\n\n     let currentImage = target.getAttribute('data-currentimage');\n\n     const size = target.getAttribute('data-size');\n\n     const croppedImage = new Croppie(imageHandler, {\n         enableExif: true,\n         viewport: {\n             width: (size / 100) * (90),\n             height: (size / 100) * (90),\n             type: 'square'\n         },\n\n     });\n     croppedImage.bind({\n         url: currentImage,\n     });\n\n     setBackgroundImage(imageHandler, '');\n\n     const zoomslider = target.querySelector(selectors.regions.zoomslider);\n     zoomslider.classList.add('form-control-range');\n     // Increase the slider step size so it is keyboard accessible.\n     zoomslider.setAttribute('step', 0.01);\n\n     // Makes the viewport look like a circle\n     if (target.getAttribute('data-rounded') === 'rounded') {\n         target.querySelector('.cr-viewport').classList.add('cr-vp-circle');\n     }\n\n     confirmAction(target, getString('cropimage', 'qtype_imageselect'), () => {\n         croppedImage.result('base64').then(imageData => {\n\n             let ajaxParams = {\n                 imagedata: imageData.split('base64,')[1],\n                 imagefilename: 'cropped.png',\n                 cropped: 1,\n                 component: target.getAttribute('data-component'),\n                 filearea: target.getAttribute('data-filearea'),\n                 contextid: target.getAttribute('data-contextid'),\n                 draftitemid: target.getAttribute('data-draftitemid')\n             };\n\n             showSpinner(target, true);\n\n             updateImage({params: ajaxParams}).then(result => {\n                 if (result.success) {\n                     setBackgroundImage(imageHandler, imageData);\n                     croppedImage.destroy();\n                 }\n                 if (result.warning) {\n                     showImageAlert(imageHandler, result.warning, 'warning');\n                 }\n                 showSpinner(target, false);\n                 showEditActions(target);\n                 return;\n             }).catch(Notification.exception);\n             return;\n         }).catch(Notification.exception);\n     });\n\n     cancelAction(target, () => {\n         croppedImage.destroy();\n         setBackgroundImage(imageHandler, currentImage);\n         showEditActions(target);\n     });\n };\n const imageRotator = (target, angle) => {\n     const imageHandler = target.querySelector(selectors.regions.imagehandler);\n     /* eslint-disable-next-line*/\n     let currentImage = target.getAttribute('data-currentimage');\n     const size = target.getAttribute('data-size');\n     var image = document.getElementById('singleimage_id_imageitem_0');\n//this.cropper.rotate(90).getImageData().rotate.to.equal(90);\n    var mycropper =  new Cropper(image, {\n        aspectRatio: 1 / 1,\n        minCropBoxHeight: 250,\n        minCropBoxWidth: 250,\n        rotatable:true\n        // ready() {\n        //   //this.cropper.rotate(angle);\n        //   this.cropper.rotate(angle).getImageData().rotate.to.equal(angle);\n        // },\n      });\n      mycropper.rotate(angle);\n    // var cropper = new Cropper(image, {\n    //     aspectRatio: 1 / 1,\n    //     minCropBoxHeight: 250,\n    //     minCropBoxWidth: 250,\n    //     rotatable:true,\n    // });\n    // cropper.rotate(angle).getImageData().rotate.to.equal(angle);\n\n\n     return;\n     const croppedImage = new Cropper(imageHandler, {\n         enableExif: true,\n         viewport: {\n             width: (size / 100) * (100),\n             height: (size / 100) * (100),\n             boundary:{width:300, height:300},\n             type: 'square',\n         },\n         enableOrientation: true,\n         showZoomer: false,\n     });\n     croppedImage.bind({\n         url: currentImage,\n         orientation: orientation\n     });\n\n     setBackgroundImage(imageHandler, '');\n\n     confirmAction(target, getString('confirm', 'qtype_imageselect'), () => {\n         croppedImage.result('base64').then(imageData => {\n\n             let ajaxParams = {\n                 imagedata: imageData.split('base64,')[1],\n                 imagefilename: 'rotated.png',\n                 cropped: 1,\n                 component: target.getAttribute('data-component'),\n                 filearea: target.getAttribute('data-filearea'),\n                 contextid: target.getAttribute('data-contextid'),\n                 draftitemid: target.getAttribute('data-draftitemid')\n             };\n\n             showSpinner(target, true);\n\n             updateImage({params: ajaxParams}).then(result => {\n                 if (result.success) {\n                     setBackgroundImage(imageHandler, imageData);\n                     croppedImage.destroy();\n                 }\n                 if (result.warning) {\n                     showImageAlert(imageHandler, result.warning, 'warning');\n                 }\n                 showSpinner(target, false);\n                 showEditActions(target);\n                 return;\n             }).catch(Notification.exception);\n             return;\n         }).catch(Notification.exception);\n     });\n\n     cancelAction(target, () => {\n         croppedImage.destroy();\n         setBackgroundImage(imageHandler, currentImage);\n         showEditActions(target);\n     });\n };\n //End\n /**\n  * Upload a new image.\n  * @param {HTMLElement} target DOM node of the editable image wrapper.\n  * @param {Int} siteMaxBytes the maximum size for these images.\n  * @param {Event} event the event listener event.\n  */\n const imageUploader = (target, siteMaxBytes, event) => {\n     const imageHandler = target.querySelector(selectors.regions.imagehandler);\n\n     const hiddenFormField = target.querySelector(selectors.regions.hiddenFormField);\n\n     let file = event.target.files[0];\n\n     // Only process image files.\n     if (!file.type.match('image.*')) {\n         return;\n     }\n\n     let backupImage = target.getAttribute('data-currentimage');\n\n     if (backupImage === '') {\n         backupImage = target.getAttribute('data-defaultimage');\n     }\n\n     var reader = new FileReader();\n     reader.onload = (() => {\n         let filedata = reader.result;\n\n         if (file.size > siteMaxBytes) {\n             const maxbytesstr = {\n                 size: humanFileSize(siteMaxBytes),\n                 file: file.name\n             };\n             getString('maxbytesfile', 'error', maxbytesstr).done(message => {\n                 showImageAlert(imageHandler, message);\n             });\n             return;\n         }\n\n         // Warn if image resolution is too small.\n         let img = document.createElement('img');\n         img.setAttribute('src', filedata);\n         img.addEventListener('load', () => {\n             if (img.naturalWidth < 512) {\n                 getString('resolutionlow', 'qtype_imageselect').done(message => {\n                     showImageAlert(imageHandler, message);\n                 });\n             }\n         });\n         setBackgroundImage(imageHandler, filedata);\n\n         let ajaxParams = {\n             imagefilename: file.name,\n             imagedata: filedata.split('base64,')[1],\n             cropped: 0,\n             component: target.getAttribute('data-component'),\n             filearea: target.getAttribute('data-filearea'),\n             contextid: target.getAttribute('data-contextid'),\n             draftitemid: target.getAttribute('data-draftitemid')\n         };\n\n         confirmAction(target, getString('save', 'admin'), () => {\n             showSpinner(target, true);\n             updateImage({params: ajaxParams}).then(result => {\n                 if (result.success) {\n                     target.setAttribute('data-currentimage', result.fileurl);\n                     backupImage = result.fileurl;\n                 }\n                 if (result.warning) {\n                     showImageAlert(imageHandler, result.warning, 'warning');\n                 }\n                 if (hiddenFormField) {\n                     hiddenFormField.value = ajaxParams.draftitemid;\n                 }\n                 showSpinner(target, false);\n                 showEditActions(target);\n                 return;\n             }).catch(Notification.exception);\n         });\n         cancelAction(target, () => {\n             setBackgroundImage(imageHandler, backupImage);\n             showEditActions(target);\n         });\n     });\n     // Read in the image file as a data URL.\n     reader.readAsDataURL(file);\n };\n\n /**\n  * Delete the image.\n  *\n  * @param {HTMLElement} target DOM node of the editable image wrapper.\n  * @returns {String} empty\n  */\n const imageDelete = target => {\n     const deleteimage = target.querySelector(selectors.actions.deleteimage);\n\n     const hiddenFormField = target.querySelector(selectors.regions.hiddenFormField);\n\n     if (!deleteimage.classList.contains(selectors.classes.enabled)) {\n         return '';\n     }\n\n     const defaultImage = target.getAttribute('data-defaultimage');\n\n     const imageHandler = target.querySelector(selectors.regions.imagehandler);\n\n     let ajaxParams = {\n         imagedata: '',\n         imagefilename: '',\n         cropped: 0,\n         component: target.getAttribute('data-component'),\n         filearea: target.getAttribute('data-filearea'),\n         contextid: target.getAttribute('data-contextid'),\n         draftitemid: target.getAttribute('data-draftitemid'),\n         'delete': 1,\n     };\n\n     confirmAction(target, getString('delete', 'moodle'), () => {\n         showSpinner(target, true);\n         updateImage({params: ajaxParams}).then(result => {\n             if (result.success) {\n                 setBackgroundImage(imageHandler, defaultImage);\n                 target.setAttribute('data-currentimage', '');\n             }\n             if (hiddenFormField) {\n                 hiddenFormField.value = -2;\n             }\n             showSpinner(target, false);\n             showEditActions(target);\n             return '';\n         }).catch(Notification.exception);\n     });\n\n     cancelAction(target, () => {\n         showEditActions(target);\n     });\n     return '';\n };\n\n /**\n  * Initiate the editable image controls.\n  *\n  * @param {HTMLElement} target DOM node of the editable image\n  * @param {int} siteMaxBytes\n  */\n export const init = (target, siteMaxBytes) => {\n     const cropimage = target.querySelector(selectors.actions.cropimage);\n     const rotateleft = target.querySelector(selectors.actions.rotateleft);\n     const rotateright = target.querySelector(selectors.actions.rotateright);\n     const uploadimage = target.querySelector(selectors.actions.uploadimage);\n     const deleteimage = target.querySelector(selectors.actions.deleteimage);\n     const imagecontrols = target.querySelector(selectors.regions.imagecontrols);\n\n\n\n  //   Actions on cropping\n     cropimage.addEventListener('click', e => {\n        imageCropper(target);\n        e.preventDefault();\n     });\n     // Actions on rotateleft\n     rotateleft.addEventListener('click', e => {\n         imageRotator(target, -20);\n         e.preventDefault();\n     });\n     // Actions on rotateright\n     rotateright.addEventListener('click', e => {\n         imageRotator(target, 20);\n         e.preventDefault();\n     });\n\n     // Process the uploaded file\n     uploadimage.addEventListener('change', e => {\n         imageUploader(target, siteMaxBytes, e);\n         e.preventDefault();\n     });\n\n     // Delete the shown image.\n     deleteimage.addEventListener('click', e => {\n        //  imageDelete(target);\n         e.preventDefault();\n     });\n\n     showEditActions(target);\n     imagecontrols.classList.add('js-enabled');\n\n };\n"],"names":["_ajax","_interopRequireDefault","_cropper","_templates","_notification","selectors","confirm","cancel","cropimage","rotateleft","rotateright","uploadimage","deleteimage","imagehandler","imagecontrols","alert","zoomslider","editactions","confirmactions","spinner","hiddenFormField","hidden","saving","deleting","disabled","enabled","humanFileSize","size","i","Math","floor","log","pow","toFixed","showImageAlert","target","msg","Templates","default","render","message","closebutton","iswarning","then","html","js","prependNodeContents","showSpinner","show","querySelector","classList","remove","add","showDeleteOption","setAttribute","showEditActions","currentimage","getAttribute","removeImageAlert","updateImage","args","request","methodname","Ajax","call","fail","Notification","exception","setBackgroundImage","imageHandler","imageUrl","style","backgroundImage","confirmAction","string","action","newconfirm","cloneNode","parentNode","replaceChild","done","str","innerHTML","addEventListener","e","preventDefault","cancelAction","newcancel","imageRotator","angle","image","document","getElementById","Cropper","aspectRatio","minCropBoxHeight","minCropBoxWidth","rotatable","rotate","siteMaxBytes","selectors_regions","currentImage","croppedImage","Croppie","enableExif","viewport","width","height","type","bind","url","getString","result","imageData","ajaxParams","imagedata","split","imagefilename","cropped","component","filearea","contextid","draftitemid","params","success","destroy","warning","catch","imageCropper","event","file","files","match","backupImage","reader","FileReader","onload","filedata","maxbytesstr","name","get_string","img","createElement","naturalWidth","fileurl","value","readAsDataURL","imageUploader"],"mappings":"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"}