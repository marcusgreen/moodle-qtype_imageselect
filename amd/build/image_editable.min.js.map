{"version":3,"file":"image_editable.min.js","sources":["../src/image_editable.js"],"sourcesContent":["/**\n * This file is part of Moodle - http://moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @copyright 2021 Bas Brands\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n import Ajax from 'core/ajax';\n import Croppie from 'qtype_imageselect/cropper';\n import {get_string as getString} from 'core/str';\n import Templates from 'core/templates';\n import Notification from 'core/notification';\n\n const selectors = {\n     actions: {\n         confirm: '[data-action=\"confirm\"]',\n         cancel: '[data-action=\"cancel\"]',\n         cropimage: '[data-action=\"cropimage\"]',\n         rotateleft: '[data-action=\"rotateleft\"]',\n         rotateright: '[data-action=\"rotateright\"]',\n         uploadimage: '[data-action=\"uploadimage\"]',\n         deleteimage: '[data-action=\"deleteimage\"]'\n     },\n     regions: {\n         imagehandler: '[data-region=\"imagehandler\"]',\n         imagecontrols: '[data-region=\"imagecontrols\"]',\n         alert: '.alert',\n         zoomslider: '.cr-slider',\n         editactions: '[data-region=\"editactions\"]',\n         confirmactions: '[data-region=\"confirmactions\"]',\n         spinner: '[data-region=\"spinner\"]',\n         hiddenFormField: '[data-region=\"hiddenformfield\"]'\n     },\n     classes: {\n         hidden: 'd-none',\n         saving: 'saving',\n         deleting: 'deleting',\n         disabled: 'disabled',\n         enabled: 'js-enabled'\n     }\n };\n /**\n  * Get human file size from bytes.\n  *\n  * @param {Int} size\n  * @returns {string} the human readable size string\n  */\n  export const humanFileSize = size => {\n     const i = Math.floor(Math.log(size) / Math.log(1024));\n     return (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i];\n };\n /**\n  * Show an alert on the image.\n  * @param  {HTMLElement} target DOM node of the editable image\n  * @param  {String} msg Message to show in the alert\n  * @return {Promise} Template promise.\n  */\n const showImageAlert = (target, msg) => {\n     return Templates.render('core/notification', {\n         message: msg,\n         closebutton: true,\n         iswarning: true\n     }).then((html, js) => {\n         Templates.prependNodeContents(target, html, js);\n         return;\n     });\n };\n\n /**\n  * Remove the image alert.\n  * @param {HTMLElement} target DOM node of the editable image\n  */\n const removeImageAlert = target => {\n     const alert = target.querySelector(selectors.regions.alert);\n     if (alert) {\n         alert.remove();\n     }\n };\n\n /**\n  * Show the spinner.\n  * @param  {HTMLElement} target DOM node of the editable image\n  * @param  {Bool} show\n  */\n const showSpinner = (target, show) => {\n     const spinner = target.querySelector(selectors.regions.spinner);\n     if (show) {\n         spinner.classList.remove(selectors.classes.hidden);\n     } else {\n         spinner.classList.add(selectors.classes.hidden);\n     }\n };\n\n /**\n  * Show delete option\n  * @param  {HTMLElement} target DOM node of the editable image\n  * @param  {Bool} show\n  */\n  const showDeleteOption = (target, show) => {\n     const deleteimage = target.querySelector(selectors.actions.deleteimage);\n     if (show) {\n         deleteimage.classList.add(selectors.classes.enabled);\n         deleteimage.setAttribute('tabindex', 0);\n     } else {\n         deleteimage.classList.remove(selectors.classes.enabled);\n         deleteimage.setAttribute('tabindex', -1);\n     }\n  };\n\n /**\n  * Show the edit actions upload image and crop image, this hides\n  * the confirm actions.\n  * @param  {HTMLElement} target DOM node of the editable image\n  */\n const showEditActions = target => {\n     const currentimage = target.getAttribute('data-currentimage');\n     const cropimage = target.querySelector(selectors.actions.cropimage);\n     const confirmactions = target.querySelector(selectors.regions.confirmactions);\n     const editactions = target.querySelector(selectors.regions.editactions);\n\n     if (currentimage) {\n         cropimage.classList.remove(selectors.classes.hidden);\n         showDeleteOption(target, true);\n     } else {\n         cropimage.classList.add(selectors.classes.hidden);\n         showDeleteOption(target, false);\n     }\n\n     confirmactions.classList.add(selectors.classes.hidden);\n     editactions.classList.remove(selectors.classes.hidden);\n\n\n     removeImageAlert(target);\n };\n\n /**\n  * Save an image from the image handler\n  * @param {Object} args The request arguments\n  * @return {Promise} Resolved with an array file the stored file url.\n  */\n const updateImage = args => {\n     debugger;\n     const request = {\n         methodname: 'qtype_imageselect_imageeditable_update_image',\n         args: args\n     };\n\n     let promise = Ajax.call([request])[0]\n         .fail(Notification.exception);\n\n     return promise;\n };\n\n /**\n  * Set the background image\n  * @param {HTMLElement} imageHandler DOM node of the editable image\n  * @param {String} imageUrl the new background image url or data.\n  */\n const setBackgroundImage = (imageHandler, imageUrl) => {\n     imageHandler.style.backgroundImage = 'url(\"' + imageUrl + '\")';\n };\n\n /**\n  * Show the confirm actions, this hides the edit actions.\n  * @param {HTMLElement} target DOM node of the editable image wrapper\n  * @param {Promise} string promise to show on confirm button.\n  * @param {function} action to execute.\n  */\n const confirmAction = (target, string, action) => {\n     const confirmactions = target.querySelector(selectors.regions.confirmactions);\n     const editactions = target.querySelector(selectors.regions.editactions);\n     const confirm = target.querySelector(selectors.actions.confirm);\n\n     // Create a new button to remove all old event listeners.\n     const newconfirm = confirm.cloneNode(true);\n     confirm.parentNode.replaceChild(newconfirm, confirm);\n\n     string.done(str => {\n         newconfirm.innerHTML = str;\n\n         confirmactions.classList.remove(selectors.classes.hidden);\n         editactions.classList.add(selectors.classes.hidden);\n\n         newconfirm.addEventListener('click', e => {\n             action();\n             e.preventDefault();\n         });\n     });\n     showDeleteOption(target, false);\n };\n\n /**\n  * Show the cancel actions.\n  * @param {HTMLElement} target DOM node of the editable image wrapper\n  * @param {function} action callback to execute.\n  */\n const cancelAction = (target, action) => {\n     let cancel = target.querySelector(selectors.actions.cancel);\n\n     // Create a new button to remove all old event listeners.\n     const newcancel = cancel.cloneNode(true);\n     cancel.parentNode.replaceChild(newcancel, cancel);\n\n     newcancel.addEventListener('click', e => {\n         action();\n         e.preventDefault();\n     });\n };\n\n /**\n  * Crop the current image.\n  * @param {HTMLElement} target DOM node of the editable image wrapper.\n  */\n const imageCropper = target => {\n     const imageHandler = target.querySelector(selectors.regions.imagehandler);\n\n     let currentImage = target.getAttribute('data-currentimage');\n\n     const size = target.getAttribute('data-size');\n\n     const croppedImage = new Croppie(imageHandler, {\n         enableExif: true,\n         viewport: {\n             width: (size / 100) * (90),\n             height: (size / 100) * (90),\n             type: 'square'\n         },\n\n     });\n     croppedImage.bind({\n         url: currentImage,\n     });\n\n     setBackgroundImage(imageHandler, '');\n\n     const zoomslider = target.querySelector(selectors.regions.zoomslider);\n     zoomslider.classList.add('form-control-range');\n     // Increase the slider step size so it is keyboard accessible.\n     zoomslider.setAttribute('step', 0.01);\n\n     // Makes the viewport look like a circle\n     if (target.getAttribute('data-rounded') === 'rounded') {\n         target.querySelector('.cr-viewport').classList.add('cr-vp-circle');\n     }\n\n     confirmAction(target, getString('cropimage', 'qtype_imageselect'), () => {\n         croppedImage.result('base64').then(imageData => {\n\n             let ajaxParams = {\n                 imagedata: imageData.split('base64,')[1],\n                 imagefilename: 'cropped.png',\n                 cropped: 1,\n                 component: target.getAttribute('data-component'),\n                 filearea: target.getAttribute('data-filearea'),\n                 contextid: target.getAttribute('data-contextid'),\n                 draftitemid: target.getAttribute('data-draftitemid')\n             };\n\n             showSpinner(target, true);\n\n             updateImage({params: ajaxParams}).then(result => {\n                 if (result.success) {\n                     setBackgroundImage(imageHandler, imageData);\n                     croppedImage.destroy();\n                 }\n                 if (result.warning) {\n                     showImageAlert(imageHandler, result.warning, 'warning');\n                 }\n                 showSpinner(target, false);\n                 showEditActions(target);\n                 return;\n             }).catch(Notification.exception);\n             return;\n         }).catch(Notification.exception);\n     });\n\n     cancelAction(target, () => {\n         croppedImage.destroy();\n         setBackgroundImage(imageHandler, currentImage);\n         showEditActions(target);\n     });\n };\n const imageRotator = (target, orientation) => {\n     const imageHandler = target.querySelector(selectors.regions.imagehandler);\n\n     let currentImage = target.getAttribute('data-currentimage');\n     const size = target.getAttribute('data-size');\n\n     const croppedImage = new Croppie(imageHandler, {\n         enableExif: true,\n         viewport: {\n             width: (size / 100) * (100),\n             height: (size / 100) * (100),\n             boundary:{width:300, height:300},\n             type: 'square',\n         },\n         enableOrientation: true,\n         showZoomer: false,\n     });\n     croppedImage.bind({\n         url: currentImage,\n         orientation: orientation\n     });\n\n     setBackgroundImage(imageHandler, '');\n\n     confirmAction(target, getString('confirm', 'qtype_imageselect'), () => {\n         croppedImage.result('base64').then(imageData => {\n\n             let ajaxParams = {\n                 imagedata: imageData.split('base64,')[1],\n                 imagefilename: 'rotated.png',\n                 cropped: 1,\n                 component: target.getAttribute('data-component'),\n                 filearea: target.getAttribute('data-filearea'),\n                 contextid: target.getAttribute('data-contextid'),\n                 draftitemid: target.getAttribute('data-draftitemid')\n             };\n\n             showSpinner(target, true);\n\n             updateImage({params: ajaxParams}).then(result => {\n                 if (result.success) {\n                     setBackgroundImage(imageHandler, imageData);\n                     croppedImage.destroy();\n                 }\n                 if (result.warning) {\n                     showImageAlert(imageHandler, result.warning, 'warning');\n                 }\n                 showSpinner(target, false);\n                 showEditActions(target);\n                 return;\n             }).catch(Notification.exception);\n             return;\n         }).catch(Notification.exception);\n     });\n\n     cancelAction(target, () => {\n         croppedImage.destroy();\n         setBackgroundImage(imageHandler, currentImage);\n         showEditActions(target);\n     });\n };\n //End\n /**\n  * Upload a new image.\n  * @param {HTMLElement} target DOM node of the editable image wrapper.\n  * @param {Int} siteMaxBytes the maximum size for these images.\n  * @param {Event} event the event listener event.\n  */\n const imageUploader = (target, siteMaxBytes, event) => {\n     const imageHandler = target.querySelector(selectors.regions.imagehandler);\n\n     const hiddenFormField = target.querySelector(selectors.regions.hiddenFormField);\n\n     let file = event.target.files[0];\n\n     // Only process image files.\n     if (!file.type.match('image.*')) {\n         return;\n     }\n\n     let backupImage = target.getAttribute('data-currentimage');\n\n     if (backupImage === '') {\n         backupImage = target.getAttribute('data-defaultimage');\n     }\n\n     var reader = new FileReader();\n     reader.onload = (() => {\n         let filedata = reader.result;\n\n         if (file.size > siteMaxBytes) {\n             const maxbytesstr = {\n                 size: humanFileSize(siteMaxBytes),\n                 file: file.name\n             };\n             getString('maxbytesfile', 'error', maxbytesstr).done(message => {\n                 showImageAlert(imageHandler, message);\n             });\n             return;\n         }\n\n         // Warn if image resolution is too small.\n         let img = document.createElement('img');\n         img.setAttribute('src', filedata);\n         img.addEventListener('load', () => {\n             if (img.naturalWidth < 512) {\n                 getString('resolutionlow', 'qtype_imageselect').done(message => {\n                     showImageAlert(imageHandler, message);\n                 });\n             }\n         });\n         setBackgroundImage(imageHandler, filedata);\n\n         let ajaxParams = {\n             imagefilename: file.name,\n             imagedata: filedata.split('base64,')[1],\n             cropped: 0,\n             component: target.getAttribute('data-component'),\n             filearea: target.getAttribute('data-filearea'),\n             contextid: target.getAttribute('data-contextid'),\n             draftitemid: target.getAttribute('data-draftitemid')\n         };\n\n         confirmAction(target, getString('save', 'admin'), () => {\n             showSpinner(target, true);\n             updateImage({params: ajaxParams}).then(result => {\n                 if (result.success) {\n                     target.setAttribute('data-currentimage', result.fileurl);\n                     backupImage = result.fileurl;\n                 }\n                 if (result.warning) {\n                     showImageAlert(imageHandler, result.warning, 'warning');\n                 }\n                 if (hiddenFormField) {\n                     hiddenFormField.value = ajaxParams.draftitemid;\n                 }\n                 showSpinner(target, false);\n                 showEditActions(target);\n                 return;\n             }).catch(Notification.exception);\n         });\n         cancelAction(target, () => {\n             setBackgroundImage(imageHandler, backupImage);\n             showEditActions(target);\n         });\n     });\n     // Read in the image file as a data URL.\n     reader.readAsDataURL(file);\n };\n\n /**\n  * Delete the image.\n  *\n  * @param {HTMLElement} target DOM node of the editable image wrapper.\n  * @returns {String} empty\n  */\n const imageDelete = target => {\n     const deleteimage = target.querySelector(selectors.actions.deleteimage);\n\n     const hiddenFormField = target.querySelector(selectors.regions.hiddenFormField);\n\n     if (!deleteimage.classList.contains(selectors.classes.enabled)) {\n         return '';\n     }\n\n     const defaultImage = target.getAttribute('data-defaultimage');\n\n     const imageHandler = target.querySelector(selectors.regions.imagehandler);\n\n     let ajaxParams = {\n         imagedata: '',\n         imagefilename: '',\n         cropped: 0,\n         component: target.getAttribute('data-component'),\n         filearea: target.getAttribute('data-filearea'),\n         contextid: target.getAttribute('data-contextid'),\n         draftitemid: target.getAttribute('data-draftitemid'),\n         'delete': 1,\n     };\n\n     confirmAction(target, getString('delete', 'moodle'), () => {\n         showSpinner(target, true);\n         updateImage({params: ajaxParams}).then(result => {\n             if (result.success) {\n                 setBackgroundImage(imageHandler, defaultImage);\n                 target.setAttribute('data-currentimage', '');\n             }\n             if (hiddenFormField) {\n                 hiddenFormField.value = -2;\n             }\n             showSpinner(target, false);\n             showEditActions(target);\n             return '';\n         }).catch(Notification.exception);\n     });\n\n     cancelAction(target, () => {\n         showEditActions(target);\n     });\n     return '';\n };\n\n /**\n  * Initiate the editable image controls.\n  *\n  * @param {HTMLElement} target DOM node of the editable image\n  * @param {int} siteMaxBytes\n  */\n export const init = (target, siteMaxBytes) => {\n     const cropimage = target.querySelector(selectors.actions.cropimage);\n     const rotateleft = target.querySelector(selectors.actions.rotateleft);\n     const rotateright = target.querySelector(selectors.actions.rotateright);\n\n     const uploadimage = target.querySelector(selectors.actions.uploadimage);\n     const deleteimage = target.querySelector(selectors.actions.deleteimage);\n     const imagecontrols = target.querySelector(selectors.regions.imagecontrols);\n\n     // Actions on cropping\n     cropimage.addEventListener('click', e => {\n         imageCropper(target);\n         e.preventDefault();\n     });\n     // Actions on rotateleft\n     rotateleft.addEventListener('click', e => {\n         imageRotator(target, 8);\n         e.preventDefault();\n     });\n     // Actions on rotateleft\n     rotateright.addEventListener('click', e => {\n         imageRotator(target, 6);\n         e.preventDefault();\n     });\n\n     // Process the uploaded file\n     uploadimage.addEventListener('change', e => {\n         imageUploader(target, siteMaxBytes, e);\n         e.preventDefault();\n     });\n\n     // Delete the shown image.\n     deleteimage.addEventListener('click', e => {\n         imageDelete(target);\n         e.preventDefault();\n     });\n\n     showEditActions(target);\n     imagecontrols.classList.add('js-enabled');\n\n };"],"names":["selectors","confirm","cancel","cropimage","rotateleft","rotateright","uploadimage","deleteimage","imagehandler","imagecontrols","alert","zoomslider","editactions","confirmactions","spinner","hiddenFormField","hidden","saving","deleting","disabled","enabled","humanFileSize","size","i","Math","floor","log","pow","toFixed","showImageAlert","target","msg","Templates","render","message","closebutton","iswarning","then","html","js","prependNodeContents","showSpinner","show","querySelector","classList","remove","add","showDeleteOption","setAttribute","showEditActions","currentimage","getAttribute","removeImageAlert","updateImage","args","request","methodname","Ajax","call","fail","Notification","exception","setBackgroundImage","imageHandler","imageUrl","style","backgroundImage","confirmAction","string","action","newconfirm","cloneNode","parentNode","replaceChild","done","str","innerHTML","addEventListener","e","preventDefault","cancelAction","newcancel","imageRotator","orientation","currentImage","croppedImage","Croppie","enableExif","viewport","width","height","boundary","type","enableOrientation","showZoomer","bind","url","result","imageData","ajaxParams","imagedata","split","imagefilename","cropped","component","filearea","contextid","draftitemid","params","success","destroy","warning","catch","siteMaxBytes","imageCropper","event","file","files","match","backupImage","reader","FileReader","onload","filedata","maxbytesstr","name","img","document","createElement","naturalWidth","fileurl","value","readAsDataURL","imageUploader","contains","defaultImage","imageDelete"],"mappings":"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"}